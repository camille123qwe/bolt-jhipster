package com.mycompany.myapp.domain;

import static com.mycompany.myapp.domain.AssertUtils.zonedDataTimeSameInstant;
import static org.assertj.core.api.Assertions.assertThat;

public class StrategyAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertStrategyAllPropertiesEquals(Strategy expected, Strategy actual) {
        assertStrategyAutoGeneratedPropertiesEquals(expected, actual);
        assertStrategyAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertStrategyAllUpdatablePropertiesEquals(Strategy expected, Strategy actual) {
        assertStrategyUpdatableFieldsEquals(expected, actual);
        assertStrategyUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertStrategyAutoGeneratedPropertiesEquals(Strategy expected, Strategy actual) {
        assertThat(expected)
            .as("Verify Strategy auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertStrategyUpdatableFieldsEquals(Strategy expected, Strategy actual) {
        assertThat(expected)
            .as("Verify Strategy relevant properties")
            .satisfies(e -> assertThat(e.getUuid()).as("check uuid").isEqualTo(actual.getUuid()))
            .satisfies(e -> assertThat(e.getLabel()).as("check label").isEqualTo(actual.getLabel()))
            .satisfies(e -> assertThat(e.getDescription()).as("check description").isEqualTo(actual.getDescription()))
            .satisfies(e ->
                assertThat(e.getCreatedAt())
                    .as("check createdAt")
                    .usingComparator(zonedDataTimeSameInstant)
                    .isEqualTo(actual.getCreatedAt())
            )
            .satisfies(e -> assertThat(e.getExecutionRule()).as("check executionRule").isEqualTo(actual.getExecutionRule()))
            .satisfies(e -> assertThat(e.getStatus()).as("check status").isEqualTo(actual.getStatus()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertStrategyUpdatableRelationshipsEquals(Strategy expected, Strategy actual) {
        assertThat(expected)
            .as("Verify Strategy relationships")
            .satisfies(e -> assertThat(e.getExecutionType()).as("check executionType").isEqualTo(actual.getExecutionType()))
            .satisfies(e -> assertThat(e.getSource()).as("check source").isEqualTo(actual.getSource()))
            .satisfies(e -> assertThat(e.getProject()).as("check project").isEqualTo(actual.getProject()));
    }
}
